#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

//フラグの代わり.....
const uint ISCRYSTAL = 1;	//ISCRYSTAL
const uint ISEDGECRYSTAL = 2;	//ISEDGECRYSTAL
const uint ISBOUNDARY = 4;	//ISBOUNDARY
const uint ISEDGEBOUNDARY = 8;	//ISEDGEBOUNDARY
const uint MZISODD = 16;	//セル番号のZ値が奇数である
const uint ISENDOFCELLS = 32;

//パラメータメモ（めんどい）
/*
0.8, 1.5, 0.5, 1.5, 0.5, 0.5, 0.1
13.0,2.5, 2.5, 1.0, 1.0, 0.5, 0.5
//旧水晶
beta01 = 0.8, 
			beta10 = 1.5,
			beta11 = 0.5, 
			beta20 = 1.5, 
			beta21 = 0.5,
			beta30 = 0.5, 
			beta31 = 0.1;

beta01 = 0.7,
			beta10 = 1.5,
			beta11 = 0.5, 
			beta20 = 1.0, 
			beta21 = 0.5,
			beta30 = 0.5, 
			beta31 = 0.1;
//きれい
beta01 = 0.1, 
			beta10 = 0.7,
			beta11 = 0.7, 
			beta20 = 0.5, 
			beta21 = 0.5,
			beta30 = 0.7, 
			beta31 = 0.7;
//平面
beta01 = 1.0, 
			beta10 = 1.0,
			beta11 = 1.0, 
			beta20 = 0.5, 
			beta21 = 0.5,
			beta30 = 0.3, 
			beta31 = 0.3;
//閾値ガバ
beta01 = 0.1, 
			beta10 = 0.1,
			beta11 = 0.1, 
			beta20 = 0.1, 
			beta21 = 0.1,
			beta30 = 0.1, 
			beta31 = 0.1;
//雪
beta01 = 1.73, 
			beta10 = 1.34,
			beta11 = 1.2, 
			beta20 = 1.34, 
			beta21 = 1.2,
			beta30 = 1.2, 
			beta31 = 1.2;
//斜め
beta01 = 0.5, 
			beta10 = 1.0,
			beta11 = 1.0, 
			beta20 = 3.5, 
			beta21 = 3.5,
			beta30 = 3.5, 
			beta31 = 3.5;
*/
//パラメータ
const float beta01 = 0.8, 
			beta10 = 1.5,
			beta11 = 0.5, 
			beta20 = 1.5, 
			beta21 = 0.5,
			beta30 = 0.5, 
			beta31 = 0.1;

class Cell
{
	vec4 position;
	vec4 color;
	vec3 neighbourSurfaceDir;
	ivec3 slicedNeighbourNums;
	vec3 vertexNormal;
	uint flags;
	float diffusionMass;
	float boundaryMass;
	int horizontalNeighbourNum;
	int verticalNeighbourNum;
	int neighbourNum;
	float beta;
};

layout(std430, binding = 0) buffer Cells
{
	Cell cell[];
};

layout(std430, binding = 1) buffer tmpCells
{
	Cell tmpCell[];
};

layout(binding = 2, offset = 0) uniform atomic_uint growCellCounter;

//flagIDは2進数の値
//flagsのビットのfragID番目（0から）が1ならtrue
bool isFlag(uint i, uint flagID) {
	return ((cell[i].flags & flagID) != 0);
}
void setFlagTrue(uint i, uint flagID) {
	tmpCell[i].flags |= flagID;
}
void setFlagFalse(uint i, uint flagID) {
	tmpCell[i].flags &= ~flagID;
}

void setEdgeCry(uint i){
	setFlagTrue(i, ISCRYSTAL);
	setFlagTrue(i, ISEDGECRYSTAL);
	setFlagFalse(i, ISBOUNDARY);
	setFlagFalse(i, ISEDGEBOUNDARY);
	tmpCell[i].diffusionMass = 0.0;
	//tmpCell[i].boundaryMass = 1.0;	//なった時点で閾値より高いし確かにいらんか
}

uint coord2cellID(int x, int y, int z){
	uint id = y * gl_NumWorkGroups.x * gl_NumWorkGroups.z +
		z * gl_NumWorkGroups.x + x;
	return id;
}

void main(){
	
	const uint i = gl_WorkGroupID.y * gl_NumWorkGroups.x * gl_NumWorkGroups.z +
		gl_WorkGroupID.z * gl_NumWorkGroups.x +
		gl_WorkGroupID.x;

	if(isFlag(i, ISEDGEBOUNDARY) && !isFlag(i, ISENDOFCELLS)){

		float beta = 999;

		//上中下による分岐
		//何回も参照する
		ivec3 tmpSliNeiNums = cell[i].slicedNeighbourNums;
		//上下統一のため下が大きい場合反転
		ivec3 fixedSliNeiNums
				= tmpSliNeiNums.x > tmpSliNeiNums.z ? tmpSliNeiNums.xyz : tmpSliNeiNums.zyx;

		//所属箇所判定191130改
		if(fixedSliNeiNums.x > 4 && fixedSliNeiNums.y > 3){								//穴を埋める
			beta = 0.0;
			//tmpCell[i].color = vec4(0.5, 0.5, 0.5, 1.0);
		}else if(fixedSliNeiNums.x > 3 && fixedSliNeiNums.y > 0 && fixedSliNeiNums.z > 0
			|| fixedSliNeiNums.z > 5){//面にする。でっぱりの周りの閾値を下げる
			beta = 0.1;//0.1 0.45;
			//tmpCell[i].color = vec4(0.5, cell[i].boundaryMass/2.0, 0.5, 1.0);
		}else if(fixedSliNeiNums.y > 2){	//面にする。横に伸ばしたい
			beta = 0.1;//0.1 0.45;
			//tmpCell[i].color = vec4(cell[i].boundaryMass/2.0, 0.5, 0.5, 1.0);
		}else if(fixedSliNeiNums.x+fixedSliNeiNums.y+fixedSliNeiNums.z > 6){	//斜面
			beta = 0.6;
			//tmpCell[i].color = vec4(0.0, 0.2, cell[i].boundaryMass, 1.0);
		}else if(fixedSliNeiNums.x+fixedSliNeiNums.y+fixedSliNeiNums.z > 5){	//側面
			beta = 1.2;
			//tmpCell[i].color = vec4(0.2, 0.0, cell[i].boundaryMass/2.0, 1.0);
		}else if(fixedSliNeiNums.x+fixedSliNeiNums.y+fixedSliNeiNums.z > 2){	//斜角、面角
			beta = 4.0; //カイネティクス的にくっつきにくい
			//tmpCell[i].color = vec4(0.1, 0.2, cell[i].boundaryMass/3.0, 1.0);
		}else{																	//角
			//tmpCell[i].color = vec4(0.0, 0.0, cell[i].boundaryMass/6.0, 1.0);
			beta = 6.0;	//カイネティクス的にくっつきにくい
		}
		
		if(cell[i].boundaryMass >= beta){
			setEdgeCry(i);
		}
		
		tmpCell[i].beta = beta;

	}
}