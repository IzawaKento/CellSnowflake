#version 460 core

layout(location = 6) uniform float rho = 1.0;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

//フラグの代わり.....
const uint ISCRYSTAL = 1;	//ISCRYSTAL
const uint ISEDGECRYSTAL = 2;	//ISEDGECRYSTAL
const uint ISBOUNDARY = 4;	//ISBOUNDARY
const uint ISEDGEBOUNDARY = 8;	//ISEDGEBOUNDARY
const uint MZISODD = 16;	//セル番号のZ値が奇数である
const uint ISENDOFCELLS = 32;

class Cell
{
	vec4 position;
	vec4 color;
	vec3 neighbourSurfaceDir;
	ivec3 slicedNeighbourNums;
	vec3 vertexNormal;
	uint flags;
	float diffusionMass;
	float boundaryMass;
	int horizontalNeighbourNum;
	int verticalNeighbourNum;
	int neighbourNum;
	float beta;
};

layout(std430, binding = 0) buffer Cells
{
	Cell cell[];
};

layout(std430, binding = 1) buffer tmpCells
{
	Cell tmpCell[];
};

layout(binding = 2, offset = 0) uniform atomic_uint growCellCounter;

//flagIDは2進数の値
//flagsのビットのfragID番目（0から）が1ならtrue
bool isFlag(uint i, uint flagID) {
	return ((cell[i].flags & flagID) != 0);
}
void setFlagTrue(uint i, uint flagID) {
	tmpCell[i].flags |= flagID;
}
void setFlagFalse(uint i, uint flagID) {
	tmpCell[i].flags &= ~flagID;
}

//核生成のてすと用
void setEdgeCry(uint i){
	setFlagTrue(i, ISCRYSTAL);
	setFlagTrue(i, ISEDGECRYSTAL);
	setFlagFalse(i, ISBOUNDARY);
	setFlagFalse(i, ISEDGEBOUNDARY);
	tmpCell[i].diffusionMass = 0.0;
	tmpCell[i].boundaryMass = 1.0;
}

//２次元座標から乱数
float random (vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

void main(){
	
	const uint i = gl_WorkGroupID.y * gl_NumWorkGroups.x * gl_NumWorkGroups.z +
		gl_WorkGroupID.z * gl_NumWorkGroups.x +
		gl_WorkGroupID.x;
	const uint gridNumX = gl_NumWorkGroups.x, gridNumZ = gl_NumWorkGroups.z;

	int zOddNum = int(isFlag(i, MZISODD)) * 2 - 1;	//名前思いつかん
	const uint[6] aroundCellIDs = uint[](i + 1, i - 1, i + gridNumX, i - gridNumX,
		i + gridNumX + zOddNum, i - gridNumX + zOddNum);
	
	//とりあえず自分の周りにでっぱりがあったらアトミックカウンタ+1
	if(isFlag(i, ISEDGEBOUNDARY) && !isFlag(i, ISENDOFCELLS)){
		ivec3 tmpSliNeiNums = cell[i].slicedNeighbourNums;
		ivec3 fixedSliNeiNums
			= tmpSliNeiNums.x > tmpSliNeiNums.z ? tmpSliNeiNums.xyz : tmpSliNeiNums.zyx;
		if(fixedSliNeiNums.y > 2 || (fixedSliNeiNums.x > 3 && fixedSliNeiNums.y > 0 && fixedSliNeiNums.z > 0)){
			atomicCounterIncrement(growCellCounter);
		}
	}
	
	//面成長中は拡散処理をスキップ
	if(atomicCounter(growCellCounter) > 0u){
		return;
	}
	
	//diffusion_1
	if(!isFlag(i, ISCRYSTAL) && !isFlag(i, ISENDOFCELLS)){		//気体であり端っこでない
		//乱数の決定
		float ran = random(vec2(i+111, i));
		const float gamma = 0.5;

		float tmpDiffusionMass = cell[i].diffusionMass;
		
		//周囲２０マスで拡散　簡単のため垂直:水平 = 1:1とする
		uint id;
		const float tmpValueA = 1.0 / (0.4 + 0.3 * sqrt(2.0));
		for(int aro_i = 0; aro_i < aroundCellIDs.length; ++aro_i){
			id = aroundCellIDs[aro_i];
			tmpDiffusionMass += cell[id].diffusionMass * tmpValueA;
		}
		//上周囲
		for(int aro_i = 0; aro_i < aroundCellIDs.length; ++aro_i){
			id = aroundCellIDs[aro_i] + gridNumX * gridNumZ;
			tmpDiffusionMass += cell[id].diffusionMass * sqrt(2.0) * 0.5 * tmpValueA;
				
		}
		//下周囲
		for(int aro_i = 0; aro_i < aroundCellIDs.length; ++aro_i){
			id = aroundCellIDs[aro_i] - gridNumX * gridNumZ;
			tmpDiffusionMass += cell[id].diffusionMass * sqrt(2.0) * 0.5 * tmpValueA;
				
		}
		//真上真下
		tmpDiffusionMass += cell[i+gridNumX*gridNumZ].diffusionMass * tmpValueA;
		tmpDiffusionMass += cell[i-gridNumX*gridNumZ].diffusionMass * tmpValueA;
		
		tmpDiffusionMass /= 21.0;	//21で割る

		tmpDiffusionMass += rho;	//お遊び

		//ノイズ完成 gamma0.5ぐらいがいい
		tmpDiffusionMass = (1.0 - gamma * ran) * tmpDiffusionMass + (gamma * ran) * cell[i].diffusionMass;

		if(tmpDiffusionMass > 0.3){
			setEdgeCry(i);
		}

		tmpCell[i].diffusionMass = tmpDiffusionMass;
	}
}