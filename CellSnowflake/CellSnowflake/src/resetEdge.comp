#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

//フラグの代わり.....
const uint ISCRYSTAL = 1;	//ISCRYSTAL
const uint ISEDGECRYSTAL = 2;	//ISEDGECRYSTAL
const uint ISBOUNDARY = 4;	//ISBOUNDARY
const uint ISEDGEBOUNDARY = 8;	//ISEDGEBOUNDARY
const uint MZISODD = 16;	//セル番号のZ値が奇数である
const uint ISENDOFCELLS = 32;

class Cell
{
	vec4 position;
	vec4 color;
	vec3 neighbourSurfaceDir;
	ivec3 slicedNeighbourNums;
	vec3 vertexNormal;
	uint flags;
	float diffusionMass;
	float boundaryMass;
	int horizontalNeighbourNum;
	int verticalNeighbourNum;
	int neighbourNum;
	float beta;
};

layout(std430, binding = 0) buffer Cells
{
	Cell cell[];
};

layout(std430, binding = 1) buffer tmpCells
{
	Cell tmpCell[];
};

//flagIDは2進数の値
//flagsのビットのfragID番目（0から）が1ならtrue
bool isFlag(uint i, uint flagID) {
	return ((cell[i].flags & flagID) != 0);
}
void setFlagTrue(uint i, uint flagID) {
	tmpCell[i].flags |= flagID;
}
void setFlagFalse(uint i, uint flagID) {
	tmpCell[i].flags &= ~flagID;
}

void setEdgeCry(uint i){
	setFlagTrue(i, ISCRYSTAL);
	setFlagTrue(i, ISEDGECRYSTAL);
	setFlagFalse(i, ISBOUNDARY);
	setFlagFalse(i, ISEDGEBOUNDARY);
	tmpCell[i].diffusionMass = 0.0;
	tmpCell[i].boundaryMass = 1.0;
}

void setEdgeBoundary(uint i){
	if(isFlag(i, ISCRYSTAL) || isFlag(i, ISEDGEBOUNDARY)) return;
	setFlagFalse(i, ISBOUNDARY);
	setFlagTrue(i, ISEDGEBOUNDARY);
}

void main()
{
	const uint i = gl_WorkGroupID.y * gl_NumWorkGroups.x * gl_NumWorkGroups.z +
		gl_WorkGroupID.z * gl_NumWorkGroups.x +
		gl_WorkGroupID.x;
	const uint gridNumX = gl_NumWorkGroups.x, gridNumZ = gl_NumWorkGroups.z;
	
	const float colorValue = float(i) / float(gl_NumWorkGroups.x);
	int zOddNum = int(isFlag(i, MZISODD)) * 2 - 1;	//名前思いつかん

	const uint[8] aroundCellIDs = uint[](i + 1, i - 1, i + gridNumX, i - gridNumX,
		i + gridNumX + zOddNum, i - gridNumX + zOddNum,
		i + gridNumX * gridNumZ, i - gridNumX * gridNumZ);
	
	//とりあえず色付ける
	tmpCell[i].color = vec4(0.0, 0.0, 0.0, 1.0);

	//diffusionMassのみ可視化
	//tmpCell[i].color = vec4(abs(cell[i].diffusionMass - 0.1) * 30.0, cell[i].boundaryMass, 0.0, 1.0);

	//状態
	
	if(isFlag(i, ISCRYSTAL)){
		tmpCell[i].color = vec4(0.0, 0.4, 0.4, 1.0);
	}
	if(isFlag(i, ISEDGECRYSTAL)){
		tmpCell[i].color = vec4(0.0, 0.6, 0.6, 1.0);
	}
	if(isFlag(i, ISBOUNDARY)){
		tmpCell[i].color = vec4(0.0, 0.1, 0.0, 0.0);
	}
	if(isFlag(i, ISEDGEBOUNDARY)){	//この段階では存在しないのででない
		tmpCell[i].color = vec4(0.3, 0.3, 0.3, 1.0);
	}
	
	/*
	//平行隣接結晶数
	int hNeighbourNum = cell[i].horizontalNeighbourNum;
	switch(hNeighbourNum){
		case 0:
			tmpCell[i].color.rgba = vec4(0.5, 0.5, 0.5, 1.0);
			break;
		case 1:
			tmpCell[i].color.rgba = vec4(1.0, 0.0, 0.0, 1.0);
			break;
		case 2:
			tmpCell[i].color.rgba = vec4(0.0, 1.0, 0.0, 1.0);
			break;
		case 3:
			tmpCell[i].color.rgba = vec4(0.0, 0.0, 1.0, 1.0);
			break;
		case 4:
			tmpCell[i].color.rgba = vec4(1.0, 1.0, 0.0, 1.0);
			break;
		case 5:
			tmpCell[i].color.rgba = vec4(1.0, 0.0, 1.0, 1.0);
			break;
		case 6:
			tmpCell[i].color.rgba = vec4(0.0, 1.0, 1.0, 1.0);
			break;
	}
	*/
	

	//隣接面方向ベクトル確認
	//tmpCell[i].color = vec4((normalize(cell[i].neighbourSurfaceDir) + vec3(1,1,1)) * 0.5, 1.0);
	/*
	float neighSurDirLen = length(cell[i].neighbourSurfaceDir);
	tmpCell[i].color = vec4(0.0, neighSurDirLen, 0.0, 1.0);
	*/
	
	//座標確認
	//tmpCell[i].color = vec4(cell[i].position.rgb, 1.0);

	/*
	//隣接数確認
	tmpCell[i].color = vec4(cell[i].slicedNeighbourNums[0] / 7.0
		, cell[i].slicedNeighbourNums[1] / 6.0
		, cell[i].slicedNeighbourNums[2] / 7.0, 1.0);
	*/
	
	//拡散質量確認
	//tmpCell[i].color = vec4(cell[i].diffusionMass * 5.0, 0.0, 0.0, (1.0 - step(0.05, cell[i].diffusionMass)));
	//tmpCell[i].color = vec4(cell[i].diffusionMass, 0.0, 0.0, step(0.0001, cell[i].diffusionMass));
	/*
	//気体を消す
	if(isFlag(i, ISBOUNDARY)){
		tmpCell[i].color = vec4(0.0, 0.0, 0.0, 0.0);
	}
	*/
	//端っこを消す
	
	if(isFlag(i, ISENDOFCELLS)){
		tmpCell[i].color = vec4(0.0, 0.0, 0.0, 0.0);
	}

	//resetCrystalEdge
	if(isFlag(i, ISEDGECRYSTAL) && isFlag(i, ISCRYSTAL)){
		int isEdge = 0;
		for(int aro_i = 0; aro_i < aroundCellIDs.length; ++aro_i){
			if(!isFlag(aroundCellIDs[aro_i], ISCRYSTAL)){
				isEdge = 1;
				break;
			}
		}
		if(isEdge == 0){
			setFlagFalse(i, ISEDGECRYSTAL);
		}
	}



}


