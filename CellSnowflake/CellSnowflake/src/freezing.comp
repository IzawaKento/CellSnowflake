#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

//フラグの代わり.....
const uint ISCRYSTAL = 1;	//ISCRYSTAL
const uint ISEDGECRYSTAL = 2;	//ISEDGECRYSTAL
const uint ISBOUNDARY = 4;	//ISBOUNDARY
const uint ISEDGEBOUNDARY = 8;	//ISEDGEBOUNDARY
const uint MZISODD = 16;	//セル番号のZ値が奇数である
const uint ISENDOFCELLS = 32;

//パラメータ
//水晶は準液体相がないので0.0に←いや、境界質量の増える割合
const float kappa01 = 0.1, kappa10 = 0.1, kappa11 = 0.1, 
	kappa20 = 0.1, kappa21 = 0.1, kappa30 = 0.1, kappa31 = 0.1;

class Cell
{
	vec4 position;
	vec4 color;
	vec3 neighbourSurfaceDir;
	ivec3 slicedNeighbourNums;
	vec3 vertexNormal;
	uint flags;
	float diffusionMass;
	float boundaryMass;
	int horizontalNeighbourNum;
	int verticalNeighbourNum;
	int neighbourNum;
	float beta;
	float ran;
};

layout(std430, binding = 0) buffer Cells
{
	Cell cell[];
};

layout(std430, binding = 1) buffer tmpCells
{
	Cell tmpCell[];
};

layout(binding = 2, offset = 0) uniform atomic_uint growCellCounter;

//flagIDは2進数の値
//flagsのビットのfragID番目（0から）が1ならtrue
bool isFlag(uint i, uint flagID) {
	return ((cell[i].flags & flagID) != 0);
}

//２次元座標から乱数
float random (vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

uint coord2cellID(int x, int y, int z){
	uint id = y * gl_NumWorkGroups.x * gl_NumWorkGroups.z +
		z * gl_NumWorkGroups.x + x;
	return id;
}

void main(){
	//でっぱりがあったら更新しない
	if(atomicCounter(growCellCounter) > 0u){
		return;
	}
	const uint i = gl_WorkGroupID.y * gl_NumWorkGroups.x * gl_NumWorkGroups.z +
		gl_WorkGroupID.z * gl_NumWorkGroups.x +
		gl_WorkGroupID.x;

	if(isFlag(i, ISEDGEBOUNDARY) && !isFlag(i, ISENDOFCELLS)){
		const int h = min(3, cell[i].horizontalNeighbourNum);
		const int v = min(1, cell[i].verticalNeighbourNum);

		//濃度を0~1に
		const float rho = 0.1;
		float diffParam = cell[i].diffusionMass / rho;
		//kappaを濃度が低いほど低くする
		float kappa = 0.1;//clamp(diffParam, 0.0, 1.0);

		/*
		//旧
		if(h == 0 && v == 1){
			kappa = kappa01;
		}else if(h == 1 && v == 0){
			kappa = kappa10;
		}else if(h == 1 && v == 1){
			kappa = kappa11;
		}else if(h == 2 && v == 0){
			kappa = kappa20;
		}else if(h == 2 && v == 1){
			kappa = kappa21;
		}else if(h == 3 && v == 0){
			kappa = kappa30;
		}else if(h == 3 && v == 1){
			kappa = kappa31;
		}else{
			kappa = 999;
		}
		*/

		float tmpBoundaryMass = cell[i].boundaryMass + (1 - kappa) * cell[i].diffusionMass;
		float tmpDiffusionMass = kappa * cell[i].diffusionMass;

		tmpCell[i].diffusionMass = tmpDiffusionMass;
		tmpCell[i].boundaryMass = tmpBoundaryMass;

		tmpCell[i].color = vec4(tmpBoundaryMass, 0.0, tmpBoundaryMass, 1.0);
		
	}
}