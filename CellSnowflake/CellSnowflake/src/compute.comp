#version 460 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

//フラグの代わり.....
const uint ISCRYSTAL = 1;	//ISCRYSTAL
const uint ISEDGECRYSTAL = 2;	//ISEDGECRYSTAL
const uint ISBOUNDARY = 4;	//ISBOUNDARY
const uint ISEDGEBOUNDARY = 8;	//ISEDGEBOUNDARY
const uint MZISODD = 16;	//セル番号のZ値が奇数である
const uint ISENDOFCELLS = 32;

class Cell
{
	vec4 position;
	vec4 color;
	vec3 neighbourSurfaceDir;
	ivec3 slicedNeighbourNums;
	vec3 vertexNormal;
	uint flags;
	float diffusionMass;
	float boundaryMass;
	int horizontalNeighbourNum;
	int verticalNeighbourNum;
	int neighbourNum;
	float beta;
	float ran;
};

layout(std430, binding = 0) buffer Cells
{
	Cell cell[];
};

layout(std430, binding = 1) buffer tmpCells
{
	Cell tmpCell[];
};

//flagIDは2進数の値
//flagsのビットのfragID番目（0から）が1ならtrue
bool isFlag(uint i, uint flagID) {
	return ((cell[i].flags & flagID) != 0);
}
void setFlagTrue(uint i, uint flagID) {
	tmpCell[i].flags |= flagID;
}
void setFlagFalse(uint i, uint flagID) {
	tmpCell[i].flags &= ~flagID;
}

void setEdgeBoundary(uint i){
	setFlagFalse(i, ISBOUNDARY);
	setFlagTrue(i, ISEDGEBOUNDARY);
	
}

void main()
{
	const uint i = gl_WorkGroupID.y * gl_NumWorkGroups.x * gl_NumWorkGroups.z +
		gl_WorkGroupID.z * gl_NumWorkGroups.x +
		gl_WorkGroupID.x;
	const uint gridNumX = gl_NumWorkGroups.x, gridNumZ = gl_NumWorkGroups.z;

	int zOddNum = int(isFlag(i, MZISODD)) * 2 - 1;	//名前思いつかん
	
	const uint[6] aroundCellIDs = uint[](i + 1, i - 1, i + gridNumX, i - gridNumX, 
		i + gridNumX + zOddNum, i - gridNumX + zOddNum);

	//set_boundary
	//EDGECRYSTALの周囲の気体をEDGEBOUNDARYに変える
	if(isFlag(i, ISEDGECRYSTAL)){
		
		for(int aro_i = 0; aro_i < aroundCellIDs.length; ++aro_i){
			uint id = aroundCellIDs[aro_i];
			if(!isFlag(id, ISCRYSTAL) && !isFlag(id, ISEDGEBOUNDARY)){
				setEdgeBoundary(id);
			}
		}
		if(!isFlag(i + gridNumX * gridNumZ, ISCRYSTAL) && !isFlag(i + gridNumX * gridNumZ, ISEDGEBOUNDARY)){
			setEdgeBoundary(i + gridNumX * gridNumZ);
		}
		if(!isFlag(i - gridNumX * gridNumZ, ISCRYSTAL) && !isFlag(i - gridNumX * gridNumZ, ISEDGEBOUNDARY)){
			setEdgeBoundary(i - gridNumX * gridNumZ);
		}
		
	}
}


