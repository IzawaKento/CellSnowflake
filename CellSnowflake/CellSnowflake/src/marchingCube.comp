#version 460 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

//フラグの代わり.....
const uint ISCRYSTAL = 1;	//ISCRYSTAL
const uint ISEDGECRYSTAL = 2;	//ISEDGECRYSTAL
const uint ISBOUNDARY = 4;	//ISBOUNDARY
const uint ISEDGEBOUNDARY = 8;	//ISEDGEBOUNDARY
const uint MZISODD = 16;	//セル番号のZ値が奇数である
const uint ISENDOFCELLS = 32;

class Cell
{
	vec4 position;
	vec4 color;
	vec3 neighbourSurfaceDir;
	ivec3 slicedNeighbourNums;
	vec3 vertexNormal;
	uint flags;
	float diffusionMass;
	float boundaryMass;
	int horizontalNeighbourNum;
	int verticalNeighbourNum;
	int neighbourNum;
	float beta;
	float ran;
};

struct Vertex{
	vec4 position;
	vec4 color;
};

layout(std430, binding = 0) buffer Cells
{
	Cell cell[];
};

layout(std430, binding = 3) buffer Vertexes{
	Vertex vertex[];
};

//layout(binding = 5, offset = 0) uniform atomic_uint vertexCounter;

layout(std430, binding = 6) buffer Indexes{
	uint index[];
};


layout(std430, binding = 7) buffer TriangleConnectionTables{
	int triangleConnectionTable[4096];	//[256][16]
};

//後でユニフォームに
//エッジ番号からローカル頂点番号
const int edgeConnection[12][2] =
{
		{0,1}, {1,2}, {2,3}, {3,0},
		{4,5}, {5,6}, {6,7}, {7,4},
		{0,4}, {1,5}, {2,6}, {3,7}
};

const int cubeEdgeFlags[256] =
{
	0x000, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c, 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,
	0x190, 0x099, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c, 0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,
	0x230, 0x339, 0x033, 0x13a, 0x636, 0x73f, 0x435, 0x53c, 0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,
	0x3a0, 0x2a9, 0x1a3, 0x0aa, 0x7a6, 0x6af, 0x5a5, 0x4ac, 0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,
	0x460, 0x569, 0x663, 0x76a, 0x066, 0x16f, 0x265, 0x36c, 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,
	0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0x0ff, 0x3f5, 0x2fc, 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,
	0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x055, 0x15c, 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,
	0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0x0cc, 0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,
	0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc, 0x0cc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,
	0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c, 0x15c, 0x055, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,
	0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc, 0x2fc, 0x3f5, 0x0ff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,
	0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c, 0x36c, 0x265, 0x16f, 0x066, 0x76a, 0x663, 0x569, 0x460,
	0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac, 0x4ac, 0x5a5, 0x6af, 0x7a6, 0x0aa, 0x1a3, 0x2a9, 0x3a0,
	0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, 0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x033, 0x339, 0x230,
	0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, 0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x099, 0x190,
	0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, 0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x000
};

float isFlag(uint i, uint flagID) {
	float value = ((cell[i].flags & flagID) != 0) ? 1.0 : 0.0;
	return value;
}

float growthRate(uint i){
	float value = cell[i].boundaryMass / cell[i].beta;
	return clamp(value, 0.0, 1.0);
}

float getOffset(float f1, float f2, float f){
	float fmax = f1 < 1.0 ? f2 : f1;
	float fmin = f1 < 1.0 ? f1 : f2;
	//float fDelta = fmax - fmin;
	return fmin;
	//return fDelta == 0.0 ? 0.5 : float((f - fmin) / fDelta);
}

uint index2ivec4(uint i){
	return i;
}

void main(){
	const uint wgi = gl_WorkGroupID.y * gl_NumWorkGroups.x * gl_NumWorkGroups.z +
		gl_WorkGroupID.z * gl_NumWorkGroups.x +
		gl_WorkGroupID.x;
	const uint gridNumX = gl_NumWorkGroups.x, gridNumZ = gl_NumWorkGroups.z;
	const uint y = gridNumX * gridNumZ;

	const uint cubeIndexes[8] = {
		0, 1, y+1, y, gridNumX, gridNumX+1, gridNumX+y+1, gridNumX+y
	};
	
	//出力頂点の初期化
	for(int itest = 0; itest < 12; ++itest){
		vertex[wgi * 12 + itest].position = vec4(0.0, 0.0, 0.0, 1.0);
		vertex[wgi * 12 + itest].color = vec4(1.0, 0.35, 0.6, 0.0);
	}
	
	
	uint iFlagIndex;
	int iEdgeFlags;
	float threshold = 1.0;
	float fOffset;
	float cubeValue[8];
	vec4 edgeVertPos[12];

	for(int iVertexTest = 0; iVertexTest < 8; ++iVertexTest){
		//cubeValue[iVertexTest] = isFlag(wgi+cubeIndexes[iVertexTest], ISCRYSTAL);
		cubeValue[iVertexTest] = growthRate(wgi+cubeIndexes[iVertexTest]);
	}

	iFlagIndex = 0;
	for(int iVertexTest = 0; iVertexTest < 8; ++iVertexTest){
		if(cubeValue[iVertexTest] < threshold){
			iFlagIndex |= (1 << iVertexTest);
		}
	}

	/*
	vec4 tC;
	switch(iFlagIndex){
		case 255:	//1111 1100
			tC = vec4(0.0,0.1,0.0,1.0);
			break;	
		case 0:		//0000 0000
			tC = vec4(0.3,0.0,0.0,1.0);
			break;
		case 153:	//1111 1110
			tC = vec4(1.0,1.0,0.0,1.0);
			break;
		case 136:	//1000 1000
			tC = vec4(1.0,0.0,1.0,1.0);
			break;
		case 128:	//1000 0000
			tC = vec4(0.0,0.0,1.0,1.0);
			break;
		case 15:	//0000 1111
			tC = vec4(0.0,0.7,1.0,1.0);
			break;
		case 8:	//0000 1000
			tC = vec4(0.5,0.7,0.5,1.0);
			break;
		case 102:	//0110 0110
			tC = vec4(1.0,0.7,0.7,1.0);
			break;
		default:
			tC = vec4(0.0, 0.0, 0.0, 1.0);
	}
	vertex[wgi*12].position = cell[wgi].position;
	vertex[wgi*12].color = tC;
	*/

	iEdgeFlags = cubeEdgeFlags[iFlagIndex];

	if(iEdgeFlags == 0){
		
		return;
	}
	//交差点位置を求める
	for (int iEdge = 0; iEdge < 12; ++iEdge)
	{
		//エッジに交差点がある
		if ((iEdgeFlags & (1 << iEdge)) != 0)
		{
			
			
			float f0 = cubeValue[edgeConnection[iEdge][0]];
			float f1 = cubeValue[edgeConnection[iEdge][1]];
			fOffset = f0 > f1 ? f1 : 1.0 - f0;//getOffset(f0, f1, threshold);
			//fOffset = 0.5;
			vec4 edgeVertPos0 = cell[wgi+cubeIndexes[edgeConnection[iEdge][0]]].position;
			vec4 edgeVertPos1 = cell[wgi+cubeIndexes[edgeConnection[iEdge][1]]].position;
			edgeVertPos[iEdge] = vec4(vec3(1.0-fOffset),1.0) * edgeVertPos0 + vec4(vec3(fOffset),1.0) * edgeVertPos1;

			vertex[wgi*12 + iEdge].position = edgeVertPos[iEdge];
			//TESTO
			//vertex[wgi*12 + iEdge].color = edgeVertPos[iEdge];
		}
	}

	//三角形を求める drawElement(GL_TRIANGLES)で
	for (int iTriangle = 0; iTriangle < 5; ++iTriangle)
	{
		if (triangleConnectionTable[iFlagIndex * 16 + (3 * iTriangle)] >= 0){
			vec3 p[3];
			for (int iCorner = 0; iCorner < 3; ++iCorner)
			{
				int iVertex = triangleConnectionTable[iFlagIndex * 16 + (3 * iTriangle + iCorner)];
				uint vertID = wgi * 12 + iVertex;
				//なぜかedgeVertPosにfor(iTriangle)内でアクセスすると重くなる
				//vertex[vertID].position = edgeVertPos[iVertex];
				p[iCorner] = vertex[vertID].position.xyz;
				//vertex[vertID].color = vec4(vec3(p[iCorner]-vec3(0.5)),1.0);
				index[wgi * 15 + 3 * iTriangle + iCorner] = vertID;
			}

			/*
			vec3 v01 = vec3(p[1].x - p[0].x, p[1].y - p[0].y, p[1].z - p[0].z);
			vec3 v02 = vec3(p[2].x - p[0].x, p[2].y - p[0].y, p[2].z - p[0].z);
			*/
			
			vec3 v01 = normalize(p[1] - p[0]);
			vec3 v02 = normalize(p[2] - p[0]);
			vec3 normal = normalize(vec3(
				v01.y * v02.z - v01.z * v02.y,
				v01.z * v02.x - v01.x * v02.z,
				v01.x * v02.y - v01.y * v02.x
			));
		
			vec3 normalColor = 0.5 * (normal + normalize(vec3(1.0)));
		
			for(int iCorner = 0; iCorner < 3; ++ iCorner){
				int iVertex = triangleConnectionTable[iFlagIndex * 16 + (3 * iTriangle + iCorner)];
				vertex[wgi * 12 + iVertex].color = vec4(normalColor, 1.0);
			}
			
		}
	}
}